// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package server

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// Defines values for EventAction.
const (
	EventActionCreate EventAction = "create"

	EventActionDelete EventAction = "delete"

	EventActionUpdate EventAction = "update"
)

// Defines values for Phase.
const (
	PhaseFailed Phase = "failed"

	PhaseRunning Phase = "running"

	PhaseStarting Phase = "starting"
)

// App defines model for App.
type App struct {
	Metadata Metadata  `json:"metadata"`
	Status   AppStatus `json:"status"`
}

// AppList defines model for AppList.
type AppList struct {
	Items []App `json:"items"`
}

// AppStatus defines model for AppStatus.
type AppStatus struct {
	Containers *[]Container `json:"containers,omitempty"`
	Phase      Phase        `json:"phase"`
}

// Container defines model for Container.
type Container struct {
	Name   string           `json:"name"`
	Status *ContainerStatus `json:"status,omitempty"`
}

// ContainerStatus defines model for ContainerStatus.
type ContainerStatus struct {
	Message *string `json:"message,omitempty"`
	Phase   Phase   `json:"phase"`
}

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}

// Event defines model for Event.
type Event struct {
	Action EventAction `json:"action"`
	Object EventObject `json:"object"`
	Type   string      `json:"type"`
}

// EventAction defines model for EventAction.
type EventAction string

// EventList defines model for EventList.
type EventList struct {
	Items []Event `json:"items"`
}

// EventObject defines model for EventObject.
type EventObject struct {
	App *App `json:"app,omitempty"`
}

// Metadata defines model for Metadata.
type Metadata struct {
	// The object identifier
	Name string `json:"name"`
}

// Phase defines model for Phase.
type Phase string

// UpdateAppJSONBody defines parameters for UpdateApp.
type UpdateAppJSONBody App

// UpdateAppJSONRequestBody defines body for UpdateApp for application/json ContentType.
type UpdateAppJSONRequestBody UpdateAppJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List apps
	// (GET /v1/apps)
	ListApps(ctx echo.Context) error
	// Get an app by name
	// (GET /v1/apps/{name})
	GetApp(ctx echo.Context, name string) error
	// Update app
	// (PUT /v1/apps/{name})
	UpdateApp(ctx echo.Context, name string) error
	// Watch changes
	// (GET /v1/events)
	Watch(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListApps converts echo context to params.
func (w *ServerInterfaceWrapper) ListApps(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListApps(ctx)
	return err
}

// GetApp converts echo context to params.
func (w *ServerInterfaceWrapper) GetApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetApp(ctx, name)
	return err
}

// UpdateApp converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "name" -------------
	var name string

	err = runtime.BindStyledParameterWithLocation("simple", false, "name", runtime.ParamLocationPath, ctx.Param("name"), &name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateApp(ctx, name)
	return err
}

// Watch converts echo context to params.
func (w *ServerInterfaceWrapper) Watch(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Watch(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/apps", wrapper.ListApps)
	router.GET(baseURL+"/v1/apps/:name", wrapper.GetApp)
	router.PUT(baseURL+"/v1/apps/:name", wrapper.UpdateApp)
	router.GET(baseURL+"/v1/events", wrapper.Watch)

}
