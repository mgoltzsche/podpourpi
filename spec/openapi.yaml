openapi: "3.0.3"

info:
  title: "podpourpi API"
  description: "The podpourpi REST API"
  version: "1.0.0"
  contact:
    name: Max Goltzsche
    url: https://github.com/mgoltzsche/podpourpi
    email: max.goltzsche@gmail.com

servers:
- url: "/api"

tags:
- name: apps
  description: App operations

paths:
  "/v1/events":
    get:
      summary: Watch changes
      description: Stream all changes
      operationId: watch
      responses:
        "200":
          description: |
            Stream all change events.
            The response payload may contain multiple objects, each on a separate line.
            The first emitted event list object hold a created event for each object on the server.
            Subsequently emitted event list objects contain one event only or an empty list to keep the connection alive.
          content:
            "application/json+stream":
              schema:
                $ref: "#/components/schemas/EventList"
  "/v1/apps":
    get:
      summary: List apps
      description: List all apps
      operationId: listApps
      tags:
      - apps
      responses:
        "200":
          description: Return a list of apps
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/AppList"
  "/v1/apps/{app}":
    parameters:
    - name: app
      description: App name
      in: path
      required: true
      schema:
        type: string
    get:
      summary: Get an app by name
      description: Get a specific, existing app
      operationId: getApp
      tags:
      - apps
      responses:
        "200":
          description: Returns an app
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/App"
        "404":
          description: App not found
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update app
      description: Update the configuration of an app
      operationId: updateApp
      tags:
      - apps
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/App"
      responses:
        "202":
          description: App update accepted. The operation will be completed asynchronously.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/App"
        "400":
          description: Bad request
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: |
            Conflict: the app was changed on the server by another client meanwhile.
            The client should obtain the latest state from the server, apply its changes again and retry the update operation.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
  "/v1/apps/{app}/start":
    parameters:
    - name: app
      description: App name
      in: path
      required: true
      schema:
        type: string
    - name: profile
      description: Name of an app profile
      in: query
      required: false
      schema:
        type: string
    get:
      summary: Start an app
      description: Start an app
      operationId: startApp
      tags:
      - apps
      responses:
        "200":
          description: |
            The app was started and may initialize asynchronously.
            Further status information is emitted on the events endpoint.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/App"
        "404":
          description: App not found
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
  "/v1/apps/{app}/stop":
    parameters:
    - name: app
      description: App name
      in: path
      required: true
      schema:
        type: string
    get:
      summary: Stop an app
      description: Stop an app
      operationId: stopApp
      tags:
      - apps
      responses:
        "200":
          description: |
            The app was started and may initialize asynchronously.
            Further status information is emitted on the events endpoint.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/App"
        "404":
          description: App not found
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal Server Error
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
  "/v1/apps/{app}/profile":
    parameters:
    - name: app
      description: App name
      in: path
      required: true
      schema:
        type: string
    post:
      summary: Create app profile
      description: Create app profile
      operationId: createAppProfile
      tags:
      - apps
      responses:
        "201":
          description: Created the provided profile on the server
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/AppProfile"
        "409":
          description: The provided profile name exists already on the server
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
  "/v1/apps/{app}/profile/{profile}":
    parameters:
    - name: app
      description: App name
      in: path
      required: true
      schema:
        type: string
    - name: profile
      description: App profile name
      in: path
      required: true
      schema:
        type: string
    get:
      summary: Get app profile
      description: Get app profile
      operationId: getAppProfile
      tags:
      - apps
      responses:
        "200":
          description: Returns the requested app profile
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/AppProfile"
        "404":
          description: App profile not found
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update app profile
      description: Update app profile
      operationId: updateAppProfile
      tags:
      - apps
      responses:
        "200":
          description: Updates the app profile
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/AppProfile"
        "404":
          description: App profile not found
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Metadata:
      type: object
      properties:
        name:
          description: The object identifier
          type: string
      required:
      - name
    AppList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/App"
      required:
      - items
    App:
      type: object
      description: Represents a set of capabilities that a host provides.
      properties:
        metadata:
          $ref: "#/components/schemas/Metadata"
        spec:
          $ref: "#/components/schemas/AppSpec"
        status:
          $ref: "#/components/schemas/AppStatus"
      required:
      - metadata
      - spec
      - status
    AppSpec:
      type: object
    AppStatus:
      type: object
      properties:
        activeProfile:
          type: string
        node:
          type: string
        state:
          $ref: "#/components/schemas/AppState"
        containers:
          type: array
          items:
            $ref: "#/components/schemas/Container"
      required:
      - activeProfile
      - state
      - containers
      - profiles
    Container:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        status:
          $ref: "#/components/schemas/ContainerStatus"
      required:
      - id
      - name
      - status
    ContainerStatus:
      type: object
      properties:
        state:
          $ref: "#/components/schemas/AppState"
        message:
          type: string
      required:
      - state
    AppState:
      type: string
      enum:
      - unknown
      - starting
      - running
      - error
      - exited
    AppProfile:
      type: object
      properties:
        name:
          type: string
        app:
          type: string
        properties:
          type: array
          items:
            $ref: "#/components/schemas/AppProperty"
      required:
      - name
      - app
      - properties
    AppProperty:
      type: object
      properties:
        name:
          type: string
        type:
          $ref: "#/components/schemas/AppPropertyType"
        value:
          type: string
      required:
      - name
      - type
    AppPropertyType:
      type: string
      enum:
      - string
      - password
      - service
    Error:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
      required:
      - type
      - message
    EventList:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: "#/components/schemas/Event"
      required:
      - items
    Event:
      type: object
      properties:
        action:
          $ref: "#/components/schemas/EventAction"
        object:
          $ref: "#/components/schemas/EventObject"
      required:
      - action
      - type
      - object
    EventAction:
      type: string
      enum:
      - create # might occur twice
      - update
      - delete
    EventObject:
      type: object
      properties:
        app:
          $ref: "#/components/schemas/App"
        profile:
          $ref: "#/components/schemas/AppProfile"
